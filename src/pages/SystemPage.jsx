
import { useState, useEffect } from "react";
import { Helmet } from "react-helmet";
import { FiCpu, FiWifi, FiAlertCircle, FiRefreshCw, FiActivity, FiPower, FiPlus, FiTrash2, FiCheck, FiInfo, FiEye, FiEyeOff } from "react-icons/fi";
import { DeviceService } from '../services/deviceService';
import { useTheme } from '../contexts/ThemeContext';
import { supabase, forceSchemaRefresh } from '../lib/supabase';

import StickyAlert from '../components/StickyAlert';

// Get Supabase config values
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export default function SystemPage() {
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  // Only show debug info in development
  const isDevelopment = import.meta.env.DEV;
  
  // State variables
  const [devices, setDevices] = useState([]);
  const [zones, setZones] = useState([]);
  const [apiKeys, setApiKeys] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showAddDevice, setShowAddDevice] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deviceToDelete, setDeviceToDelete] = useState(null);
  const [hiddenApiKeys, setHiddenApiKeys] = useState(new Set());
  const [newDevice, setNewDevice] = useState({
    name: '',
    device_id: '',
    firmware_version: 'v1.0.0',
    zone_id: ''
  });
  const [showDebugInfo, setShowDebugInfo] = useState(false);

  // Load data when component mounts
  useEffect(() => {
    loadAllData();
    
    // Set up automatic device status checking every 2 minutes (more reasonable)
    const statusCheckInterval = setInterval(() => {
      console.log('Auto-refreshing device status...');
      loadDevices();
    }, 120000); // 2 minutes instead of 30 seconds
    
    return () => {
      clearInterval(statusCheckInterval);
    };
  }, []);

  // Function to show success messages
  const showSuccessMessage = (message) => {
    setSuccess(message);
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      setSuccess(null);
    }, 5000);
  };

  const loadAllData = async () => {
    setLoading(true);
    setError(null);
    try {
      console.log('Loading all data...');
      await Promise.all([
        loadDevices(),
        loadZones(),
        loadApiKeys()
      ]);
    } catch (err) {
      console.error('Error loading data:', err);
      setError('Failed to load data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const loadDevices = async () => {
    try {
      console.log('Loading devices...');
      
      // First update offline devices in the database
      const offlineDevices = await DeviceService.updateOfflineDevices();
      console.log('Updated offline devices:', offlineDevices?.length || 0);
      
      // Then fetch all devices with real-time status
      const devices = await DeviceService.fetchDevices();
      console.log('Devices loaded:', devices?.length || 0);
      console.log('Device statuses:', devices?.map(d => ({ name: d.name, status: d.status, last_seen: d.last_seen })));
      setDevices(devices);
    } catch (err) {
      console.error('Error loading devices:', err);
      throw err;
    }
  };

  const loadZones = async () => {
    try {
      console.log('Loading zones...');
      const zones = await DeviceService.fetchZones();
      console.log('Zones loaded:', zones);
      setZones(zones);
    } catch (err) {
      console.error('Error loading zones:', err);
      throw err;
    }
  };

  const loadApiKeys = async () => {
    try {
      console.log('Loading API keys...');
      const apiKeys = await DeviceService.fetchApiKeys();
      console.log('API keys loaded:', apiKeys);
      setApiKeys(apiKeys);
      
      // Hide all API keys by default
      const hiddenKeys = new Set(apiKeys.map(key => key.id));
      setHiddenApiKeys(hiddenKeys);
    } catch (err) {
      console.error('Error loading API keys:', err);
      throw err;
    }
  };

  const handleAddDevice = async () => {
    try {
      if (!newDevice.name || !newDevice.device_id || !newDevice.zone_id) {
        setError('Please fill in all required fields including zone selection');
        return;
      }
      
      setLoading(true);
      setError(null);
      
      console.log('Adding device:', newDevice);
      
      // Create the device (API key will be automatically generated by the service)
      const createdDevice = await DeviceService.createDevice(newDevice);
      
      if (!createdDevice) {
        throw new Error('Failed to create device');
      }
      
      setShowAddDevice(false);
      setNewDevice({ name: '', device_id: '', firmware_version: 'v1.0.0', zone_id: '' });
      await loadAllData();
      
      // Show success message
      showSuccessMessage('Device added successfully! Check the API Keys section below for your device configuration.');
    } catch (err) {
      console.error('Error adding device:', err);
      setError('Failed to add device: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateTestSensorData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        setError('Please log in first');
        return;
      }

      // Ensure we have devices and zones
      if (devices.length === 0) {
        setError('Please create a device first');
        return;
      }

      if (zones.length === 0) {
        setError('Please create a zone first');
        return;
      }

      // Generate realistic sensor data for the last 7 days
      const sensorDataToInsert = [];
      const now = new Date();
      
      for (let day = 0; day < 7; day++) {
        for (let hour = 0; hour < 24; hour += 2) { // Every 2 hours
          const timestamp = new Date(now.getTime() - (day * 24 * 60 * 60 * 1000) - (hour * 60 * 60 * 1000));
          
          devices.forEach(device => {
            zones.forEach(zone => {
              // Generate realistic sensor readings
              const temperature = 18 + Math.random() * 12; // 18-30Â°C
              const humidity = 45 + Math.random() * 30;    // 45-75%
              const soilMoisture = 30 + Math.random() * 40; // 30-70%
              const lightLevel = 100 + Math.random() * 900; // 100-1000 lux
              const phLevel = 6.0 + Math.random() * 1.5;    // 6.0-7.5 pH
              
              sensorDataToInsert.push({
                device_id: device.id,
                zone_id: zone.id,
                temperature: Math.round(temperature * 10) / 10,
                humidity: Math.round(humidity * 10) / 10,
                soil_moisture: Math.round(soilMoisture * 10) / 10,
                light_level: Math.round(lightLevel),
                ph_level: Math.round(phLevel * 10) / 10,
                user_id: user.id,
                timestamp: timestamp.toISOString()
              });
            });
          });
        }
      }

      console.log('Inserting sensor data:', sensorDataToInsert.length, 'records');

      // Insert sensor data in batches to avoid hitting limits
      const batchSize = 50;
      for (let i = 0; i < sensorDataToInsert.length; i += batchSize) {
        const batch = sensorDataToInsert.slice(i, i + batchSize);
        const { error } = await supabase
          .from('sensor_data')
          .insert(batch);

        if (error) {
          console.error('Error inserting batch:', error);
          throw error;
        }
      }
      
      showSuccessMessage(`Generated ${sensorDataToInsert.length} sensor readings for analytics testing!`);
    } catch (err) {
      console.error('Error generating test sensor data:', err);
      setError('Failed to generate test sensor data: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleCreateZone = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('Creating default zone...');
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        setError('Please log in first');
        return;
      }

      const { data, error } = await supabase
        .from('zones')
        .insert([{
          name: 'Garden Zone 1',
          description: 'Default garden zone for ESP32 device',
          soil_type: 'Loamy',
          moisture_threshold: 40,
          user_id: user.id,
          pump_on: false
        }])
        .select();

      if (error) {
        console.error('Error creating zone:', error);
        setError('Failed to create zone: ' + error.message);
        return;
      }

      console.log('Zone created:', data);
      await loadZones();
      showSuccessMessage('Zone created successfully! You can now select it from the dropdown.');
    } catch (err) {
      console.error('Error in zone creation:', err);
      setError('Failed to create zone: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteApiKey = async (apiKeyId) => {
    try {
      if (confirm('Are you sure you want to delete this API key?')) {
        setLoading(true);
        setError(null);
        
        await DeviceService.deleteApiKey(apiKeyId);
        await loadApiKeys();
        showSuccessMessage('API key deleted successfully!');
      }
    } catch (err) {
      console.error('Error deleting API key:', err);
      setError('Failed to delete API key: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTestDevice = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // First create a zone if none exist
      if (zones.length === 0) {
        await handleCreateZone();
        await loadZones();
      }
      
      // Create a test device
      const testDevice = {
        name: 'Test ESP32 Device',
        device_id: 'ESP32_TEST_' + Date.now(),
        firmware_version: 'v1.0.0',
        zone_id: zones[0]?.id || ''
      };
      
      console.log('Creating test device:', testDevice);
      const createdDevice = await DeviceService.createDevice(testDevice);
      
      if (createdDevice) {
        // Generate API key for the test device
        const apiKeyName = `${testDevice.name} API Key`;
        await DeviceService.generateApiKey(createdDevice.id, apiKeyName);
        
        // IMPORTANT: Set the device's last_seen to 10 minutes ago to test offline detection
        const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
        await supabase
          .from('devices')
          .update({ 
            last_seen: tenMinutesAgo,
            status: 'online' // Set as online initially to test our offline detection
          })
          .eq('id', createdDevice.id);
        
        console.log('Test device created with old timestamp:', tenMinutesAgo);
      }
      
      await loadAllData();
      showSuccessMessage('Test device created with old timestamp (10 minutes ago) - should show as offline!');
    } catch (err) {
      console.error('Error creating test device:', err);
      setError('Failed to create test device: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleSimulateSensorData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        setError('Please log in first');
        return;
      }

      // Call the Supabase Edge Function
      const { data, error } = await supabase.functions.invoke('simulate-sensor-data', {
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) {
        console.error('Error calling simulate-sensor-data function:', error);
        setError('Failed to simulate sensor data: ' + error.message);
        return;
      }

      console.log('Simulation result:', data);
      showSuccessMessage(`Simulated sensor data for ${data.data?.length || 0} zones!`);
    } catch (err) {
      console.error('Error simulating sensor data:', err);
      setError('Failed to simulate sensor data: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleMakeDevicesOnline = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        setError('Please log in first');
        return;
      }

      // Update all devices to be online with current timestamp
      const { data, error } = await supabase
        .from('devices')
        .update({ 
          status: 'online',
          last_seen: new Date().toISOString()
        })
        .eq('user_id', user.id)
        .select();

      if (error) {
        console.error('Error updating devices:', error);
        setError('Failed to update devices: ' + error.message);
        return;
      }

      await loadDevices();
      showSuccessMessage(`Updated ${data?.length || 0} devices to online status!`);
    } catch (err) {
      console.error('Error making devices online:', err);
      setError('Failed to make devices online: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateApiKeyForDevice = async (deviceId) => {
    try {
      setLoading(true);
      setError(null);
      
      await DeviceService.generateApiKeyForDevice(deviceId);
      await loadApiKeys();
      showSuccessMessage('API key generated successfully! Check the API Keys section below.');
    } catch (err) {
      console.error('Error generating API key for device:', err);
      
      // Check if it's a schema issue
      if (err.message.includes('key') && err.message.includes('column')) {
        setError(`Database schema issue detected. Please run the following SQL in your Supabase dashboard:
        
1. Go to your Supabase project SQL editor
2. Run the schema fix script from: raw_data/fix_api_keys_schema.sql
3. Or run this command:
   CREATE TABLE IF NOT EXISTS api_keys (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     name TEXT NOT NULL,
     key TEXT UNIQUE NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
     user_id UUID REFERENCES auth.users NOT NULL
   );`);
      } else {
        setError('Failed to generate API key: ' + (err.message || 'Unknown error'));
      }
    } finally {
      setLoading(false);
    }
  };

  const handleTestApiKey = async (apiKey) => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await DeviceService.testApiKey(apiKey);
      
      if (result.valid) {
        showSuccessMessage('API key is valid and working!');
      } else {
        setError('API key test failed: ' + result.error);
      }
    } catch (err) {
      console.error('Error testing API key:', err);
      setError('Failed to test API key: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      showSuccessMessage('Copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      setError('Failed to copy to clipboard');
    }
  };

  const toggleApiKeyVisibility = (apiKeyId) => {
    setHiddenApiKeys(prev => {
      const newSet = new Set(prev);
      if (newSet.has(apiKeyId)) {
        newSet.delete(apiKeyId);
      } else {
        newSet.add(apiKeyId);
      }
      return newSet;
    });
  };

  // Calculate device connectivity stats
  const getDeviceStats = () => {
    const total = devices.length;
    const online = devices.filter(d => d.status === 'online').length;
    const offline = total - online;
    return { online, offline, total };
  };

  const deviceStats = getDeviceStats();

  const hasApiKeyForDevice = (deviceName) => {
    return apiKeys.some(apiKey => apiKey.name.includes(deviceName));
  };

  const handleDeleteDevice = async (deviceId, deviceName) => {
    try {
      setLoading(true);
      setError(null);
      
      // Delete the device
      await DeviceService.deleteDevice(deviceId);
      
      // Reload data
      await loadAllData();
      
      showSuccessMessage(`Device "${deviceName}" deleted successfully!`);
    } catch (err) {
      console.error('Error deleting device:', err);
      setError('Failed to delete device: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const confirmDeleteDevice = (deviceId, deviceName) => {
    setDeviceToDelete({ id: deviceId, name: deviceName });
    setShowDeleteConfirm(true);
  };

  const executeDeleteDevice = async () => {
    if (!deviceToDelete) return;
    
    await handleDeleteDevice(deviceToDelete.id, deviceToDelete.name);
    setShowDeleteConfirm(false);
    setDeviceToDelete(null);
  };

  const handleRefreshDevice = async (deviceId) => {
    try {
      setLoading(true);
      setError(null);
      
      // Get current device info
      const device = devices.find(d => d.id === deviceId);
      if (!device) {
        setError('Device not found');
        return;
      }
      
      // Force refresh device status by checking offline devices first
      await DeviceService.updateOfflineDevices();
      
      // Reload devices to get updated status
      await loadDevices();
      
      showSuccessMessage(`Device "${device.name}" status refreshed!`);
    } catch (err) {
      console.error('Error refreshing device:', err);
      setError('Failed to refresh device: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const handleRefreshSchema = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('Forcing schema refresh...');
      const result = await forceSchemaRefresh();
      
      if (result.success) {
        await loadAllData();
        showSuccessMessage('Schema cache refreshed successfully! Try creating a device now.');
      } else {
        setError('Schema refresh failed: ' + (result.error?.message || 'Unknown error'));
      }
    } catch (err) {
      console.error('Error refreshing schema:', err);
      setError('Failed to refresh schema: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>System | Smart Garden Watering System</title>
      </Helmet>
      
      <div className="space-y-6">
        <h1 className="text-3xl font-bold">System</h1>
        
        {/* Device Connectivity Alert */}
        {devices.length > 0 && deviceStats.offline > 0 && (
          <StickyAlert
            type="warning"
            dismissible={true}
            showConnectivityStatus={true}
            deviceStatus={deviceStats}
            message={`${deviceStats.offline} of ${deviceStats.total} device${deviceStats.total > 1 ? 's' : ''} offline`}
          />
        )}
        
        {devices.length > 0 && deviceStats.offline === 0 && deviceStats.online > 0 && (
          <StickyAlert
            type="info"
            dismissible={true}
            autoHide={true}
            duration={3000}
            deviceStatus={deviceStats}
            message={`All ${deviceStats.total} device${deviceStats.total > 1 ? 's' : ''} connected and online`}
          />
        )}
        
        {/* Error Display */}
        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
            <div className="flex items-center">
              <FiAlertCircle className="h-5 w-5 text-red-400 mr-2" />
              <p className="text-red-800 dark:text-red-200">{error}</p>
            </div>
            <button 
              onClick={() => setError(null)} 
              className="mt-2 text-sm text-red-600 dark:text-red-400 hover:underline"
            >
              Dismiss
            </button>
          </div>
        )}

        {/* Success Display */}
        {success && (
          <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
            <div className="flex items-center">
              <FiCheck className="h-5 w-5 text-green-400 mr-2" />
              <p className="text-green-800 dark:text-green-200">{success}</p>
            </div>
            <button 
              onClick={() => setSuccess(null)} 
              className="mt-2 text-sm text-green-600 dark:text-green-400 hover:underline"
            >
              Dismiss
            </button>
          </div>
        )}
        
        {/* Loading Indicator */}
        {loading && (
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <div className="flex items-center">
              <FiRefreshCw className="h-5 w-5 text-blue-400 mr-2 animate-spin" />
              <p className="text-blue-800 dark:text-blue-200">Loading...</p>
            </div>
          </div>
        )}
        
        {/* Debug Toggle Button - Only show in development */}
        {isDevelopment && (
          <div className="flex justify-end">
            <button
              onClick={() => setShowDebugInfo(!showDebugInfo)}
              className="flex items-center px-3 py-1 text-xs font-medium text-white bg-yellow-500 hover:bg-yellow-600 rounded-md transition"
            >
              <FiInfo className="mr-1 h-3 w-3" />
              {showDebugInfo ? 'Hide' : 'Show'} Debug
            </button>
          </div>
        )}
        
        {/* Debug Info - Only show in development and when toggled */}
        {isDevelopment && showDebugInfo && (
          <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
            <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">Debug Information</h3>
            <div className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
              <p>Zones loaded: {zones.length}</p>
              <p>Devices loaded: {devices.length}</p>
              <p>API Keys loaded: {apiKeys.length}</p>
              <p>Modal open: {showAddDevice ? 'Yes' : 'No'}</p>
              <p>Zone names: {zones.map(z => z.name).join(', ') || 'None'}</p>
              <p>API Key names: {apiKeys.map(k => k.name).join(', ') || 'None'}</p>
              <p><strong>Device Status Check:</strong></p>
              {devices.map(device => (
                <p key={device.id} className="ml-2">
                  {device.name}: {device.status} (original: {device.original_status})
                  <br />
                  <span className="text-xs">Last seen: {device.last_seen ? new Date(device.last_seen).toLocaleString() : 'Never'}</span>
                </p>
              ))}
            </div>
            <div className="mt-2 space-x-2">
              <button 
                onClick={loadZones} 
                className="px-2 py-1 bg-blue-500 text-white rounded text-xs"
              >
                Reload Zones
              </button>
              <button 
                onClick={loadApiKeys} 
                className="px-2 py-1 bg-green-500 text-white rounded text-xs"
              >
                Reload API Keys
              </button>
              <button 
                onClick={handleRefreshSchema} 
                className="px-2 py-1 bg-purple-500 text-white rounded text-xs"
              >
                Refresh Schema
              </button>
              <button 
                onClick={() => setShowAddDevice(true)} 
                className="px-2 py-1 bg-purple-500 text-white rounded text-xs"
              >
                Open Modal
              </button>
              <button 
                onClick={handleCreateZone} 
                className="px-2 py-1 bg-orange-500 text-white rounded text-xs"
              >
                Create Test Zone
              </button>
              <button 
                onClick={handleCreateTestDevice} 
                className="px-2 py-1 bg-red-500 text-white rounded text-xs"
              >
                Create Test Device (Old Timestamp)
              </button>
              <button 
                onClick={handleGenerateTestSensorData} 
                className="px-2 py-1 bg-green-500 text-white rounded text-xs"
              >
                Generate Test Sensor Data
              </button>
              <button 
                onClick={handleSimulateSensorData} 
                className="px-2 py-1 bg-blue-500 text-white rounded text-xs"
              >
                Simulate Live Data (Supabase Fn)
              </button>
              <button 
                onClick={async () => {
                  // Force all existing devices to have old timestamps
                  const { data: { user } } = await supabase.auth.getUser();
                  if (user) {
                    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
                    await supabase
                      .from('devices')
                      .update({ last_seen: tenMinutesAgo })
                      .eq('user_id', user.id);
                    
                    await loadDevices();
                    showSuccessMessage('All devices set to 10 minutes ago - they should now show as offline!');
                  }
                }} 
                className="px-2 py-1 bg-red-500 text-white rounded text-xs"
              >
                Force Devices Offline (10m ago)
              </button>
              <button 
                onClick={handleMakeDevicesOnline} 
                className="px-2 py-1 bg-green-500 text-white rounded text-xs"
              >
                Make All Devices Online
              </button>
            </div>
          </div>
        )}

        {/* Add Device Button */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-lg font-semibold">Device Management</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">Add and manage your ESP32 devices</p>
            </div>
            <button
              onClick={() => setShowAddDevice(true)}
              disabled={loading}
              className="flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition disabled:opacity-50"
            >
              <FiPlus className="mr-2 h-4 w-4" />
              Add Device
            </button>
          </div>
        </div>

        {/* Add Device Modal */}
        {showAddDevice && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md">
              <h3 className="text-lg font-semibold mb-4">Add New Device</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Device Name</label>
                  <input
                    type="text"
                    value={newDevice.name}
                    onChange={(e) => setNewDevice(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    placeholder="e.g., Garden Monitor 1"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Device ID</label>
                  <input
                    type="text"
                    value={newDevice.device_id}
                    onChange={(e) => setNewDevice(prev => ({ ...prev, device_id: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    placeholder="e.g., ESP32_PLANT_MONITOR_001"
                  />
              </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Firmware Version</label>
                  <input
                    type="text"
                    value={newDevice.firmware_version}
                    onChange={(e) => setNewDevice(prev => ({ ...prev, firmware_version: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    placeholder="e.g., v1.0.0"
                  />
            </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Zone</label>
                  {zones.length > 0 ? (
                    <select
                      value={newDevice.zone_id}
                      onChange={(e) => setNewDevice(prev => ({ ...prev, zone_id: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    >
                      <option value="">Select a zone</option>
                      {zones.map((zone) => (
                        <option key={zone.id} value={zone.id}>
                          {zone.name} ({zone.soil_type})
                        </option>
                      ))}
                    </select>
                  ) : (
                    <div className="space-y-2">
                      <p className="text-xs text-red-500">No zones available. Create a zone first:</p>
                      <button
                        type="button"
                        onClick={handleCreateZone}
                        className="w-full px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition text-sm"
                      >
                        Create Default Zone
                      </button>
              </div>
                  )}
              </div>
              </div>
              
              <div className="flex space-x-3 mt-6">
                <button
                  onClick={() => setShowAddDevice(false)}
                  disabled={loading}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition disabled:opacity-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddDevice}
                  disabled={loading}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition disabled:opacity-50"
                >
                  {loading ? 'Adding...' : 'Add Device'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* API Keys Section */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4 sm:p-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
            <div>
              <h2 className="text-lg font-semibold mb-1">Device Configuration</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">API keys and configuration data for your ESP32 devices</p>
            </div>
            <button
              onClick={loadApiKeys}
              disabled={loading}
              className="flex items-center justify-center px-3 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition disabled:opacity-50 w-full sm:w-auto"
            >
              <FiRefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              Refresh
            </button>
          </div>
          
          {apiKeys.length > 0 ? (
            <div className="space-y-4">
              {apiKeys.map((apiKey) => (
                <div key={apiKey.id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 sm:p-6 transition-all duration-200 hover:shadow-md">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                    <div className="flex-1">
                      <h3 className="font-medium text-gray-900 dark:text-white text-base">
                        {apiKey.name}
                      </h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                        Created: {new Date(apiKey.created_at).toLocaleString()}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleDeleteApiKey(apiKey.id)}
                        disabled={loading}
                        className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition disabled:opacity-50"
                        title="Delete API key"
                        aria-label="Delete API key"
                      >
                        <FiTrash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        API Key (for ESP32 code)
                      </label>
                      <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
                        <div className="flex-1 relative">
                          <input
                            type={hiddenApiKeys.has(apiKey.id) ? "password" : "text"}
                            value={apiKey.key}
                            readOnly
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white text-sm font-mono pr-10 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                            aria-label="API key value"
                          />
                          <button
                            onClick={() => toggleApiKeyVisibility(apiKey.id)}
                            className="absolute right-2 top-1/2 transform -translate-y-1/2 p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded transition"
                            title={hiddenApiKeys.has(apiKey.id) ? "Show API key" : "Hide API key"}
                            aria-label={hiddenApiKeys.has(apiKey.id) ? "Show API key" : "Hide API key"}
                          >
                            {hiddenApiKeys.has(apiKey.id) ? <FiEye className="h-4 w-4" /> : <FiEyeOff className="h-4 w-4" />}
                          </button>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={() => copyToClipboard(apiKey.key)}
                            disabled={loading}
                            className="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition text-sm disabled:opacity-50 flex items-center justify-center min-w-[60px]"
                            aria-label="Copy API key to clipboard"
                          >
                            Copy
                          </button>
                          <button
                            onClick={() => handleTestApiKey(apiKey.key)}
                            disabled={loading}
                            className="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition text-sm disabled:opacity-50 flex items-center justify-center min-w-[60px]"
                            aria-label="Test API key"
                          >
                            Test
                          </button>
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Supabase Configuration
                        </label>
                        <div className="bg-gray-50 dark:bg-gray-900 rounded-md p-3 text-sm font-mono overflow-x-auto">
                          <div className="text-blue-600 dark:text-blue-400">const char* supabaseUrl = "{supabaseUrl}";</div>
                          <div className="text-purple-600 dark:text-purple-400">const char* supabaseAnonKey = "{supabaseAnonKey}";</div>
                          <div className="text-green-600 dark:text-green-400">const char* apiKey = "{apiKey.key}";</div>
                        </div>
                        <button
                          onClick={() => copyToClipboard(`const char* supabaseUrl = "${supabaseUrl}";\nconst char* supabaseAnonKey = "${supabaseAnonKey}";\nconst char* apiKey = "${apiKey.key}";`)}
                          className="mt-2 px-2 py-1 bg-gray-600 text-white rounded text-xs hover:bg-gray-700 transition"
                          aria-label="Copy Supabase configuration"
                        >
                          Copy Config
                        </button>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          ESP32 Code Template
                        </label>
                        <div className="bg-gray-50 dark:bg-gray-900 rounded-md p-3 text-sm font-mono overflow-x-auto">
                          <div className="text-gray-500 dark:text-gray-400">// Include your API key</div>
                          <div className="text-green-600 dark:text-green-400">const char* apiKey = "{apiKey.key}";</div>
                          <div className="text-gray-500 dark:text-gray-400">// Use in HTTP headers</div>
                          <div className="text-blue-600 dark:text-blue-400">headers["apikey"] = apiKey;</div>
                        </div>
                        <button
                          onClick={() => copyToClipboard(`// Include your API key\nconst char* apiKey = "${apiKey.key}";\n// Use in HTTP headers\nheaders["apikey"] = apiKey;`)}
                          className="mt-2 px-2 py-1 bg-gray-600 text-white rounded text-xs hover:bg-gray-700 transition"
                          aria-label="Copy ESP32 code template"
                        >
                          Copy Template
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <FiCpu className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">No API keys found</p>
              <p className="text-xs text-gray-400 dark:text-gray-500">Add a device to generate API keys for ESP32 configuration</p>
            </div>
          )}
        </div>

        {/* Connected Devices Section */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-lg font-semibold mb-1">Connected Devices</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">ESP32 devices registered to your account</p>
            </div>
            <button
              onClick={loadDevices}
              disabled={loading}
              className="flex items-center px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition disabled:opacity-50"
            >
              <FiRefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              Refresh All
            </button>
          </div>
          
          {devices.length > 0 ? (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {devices.map((device) => (
                <div key={device.id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-medium text-gray-900 dark:text-white">{device.name}</h3>
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium flex items-center space-x-1 ${
                        device.status === 'online' 
                          ? 'bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                          : 'bg-red-50 text-red-700 dark:bg-red-900/30 dark:text-red-400'
                      }`}>
                        <div className={`w-2 h-2 rounded-full ${
                          device.status === 'online' ? 'bg-green-500' : 'bg-red-500'
                        }`}></div>
                        <span>{device.status}</span>
                      </span>
                    </div>
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                    <p>ID: <span className="font-mono text-xs">{device.device_id}</span></p>
                    <p>Last seen: {device.last_seen ? new Date(device.last_seen).toLocaleString() : 'Never'}</p>
                    {device.status === 'offline' && device.last_seen && (() => {
                      const now = new Date();
                      const lastSeen = new Date(device.last_seen);
                      const diffMinutes = Math.floor((now - lastSeen) / (1000 * 60));
                      const diffHours = Math.floor(diffMinutes / 60);
                      const diffDays = Math.floor(diffHours / 24);
                      
                      let timeAgo;
                      if (diffDays > 0) {
                        timeAgo = `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
                      } else if (diffHours > 0) {
                        timeAgo = `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
                      } else {
                        timeAgo = `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
                      }
                      
                      return (
                        <p className="text-red-600 dark:text-red-400 text-xs">
                          Offline for: {timeAgo}
                        </p>
                      );
                    })()}
                    {device.firmware_version && (
                      <p>Firmware: {device.firmware_version}</p>
                    )}
                    {device.ip_address && (
                      <p>IP: {device.ip_address}</p>
                    )}
                  </div>
                  <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600 space-y-2">
                    {hasApiKeyForDevice(device.name) ? (
                      <div className="flex items-center justify-center text-green-600 dark:text-green-400 text-sm">
                        <FiActivity className="mr-1 h-4 w-4" />
                        API Key Available
                      </div>
                    ) : (
                      <button
                        onClick={() => handleGenerateApiKeyForDevice(device.device_id)}
                        disabled={loading}
                        className="w-full px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition text-sm disabled:opacity-50"
                      >
                        Generate API Key
                      </button>
                    )}
                    
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleRefreshDevice(device.id)}
                        disabled={loading}
                        className="flex-1 px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition text-sm disabled:opacity-50 flex items-center justify-center"
                        title="Refresh device status"
                      >
                        <FiRefreshCw className="h-4 w-4 mr-1" />
                        Refresh
                      </button>
                      <button
                        onClick={() => confirmDeleteDevice(device.id, device.name)}
                        disabled={loading}
                        className="flex-1 px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition text-sm disabled:opacity-50 flex items-center justify-center"
                        title="Delete device"
                      >
                        <FiTrash2 className="h-4 w-4 mr-1" />
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <FiCpu className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">No devices found</p>
              <p className="text-xs text-gray-400">Add your first ESP32 device to get started</p>
            </div>
          )}
        </div>
      </div>

        {/* Delete Confirmation Modal */}
        {showDeleteConfirm && deviceToDelete && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md">
              <div className="flex items-center mb-4">
                <FiAlertCircle className="h-6 w-6 text-red-500 mr-3" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Delete Device</h3>
              </div>
              
              <p className="text-gray-600 dark:text-gray-300 mb-4">
                Are you sure you want to delete the device <strong>"{deviceToDelete.name}"</strong>?
              </p>
              
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 mb-4">
                <p className="text-sm text-red-700 dark:text-red-300">
                  <strong>Warning:</strong> This action cannot be undone and will also delete any associated API keys.
                </p>
              </div>
              
              <div className="flex space-x-3">
                <button
                  onClick={() => {
                    setShowDeleteConfirm(false);
                    setDeviceToDelete(null);
                  }}
                  disabled={loading}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition disabled:opacity-50"
                >
                  Cancel
                </button>
                <button
                  onClick={executeDeleteDevice}
                  disabled={loading}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition disabled:opacity-50"
                >
                  {loading ? 'Deleting...' : 'Delete Device'}
                </button>
              </div>
            </div>
          </div>
        )}
    </>
  );
} 